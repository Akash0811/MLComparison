# Importing the dataset
dataset = read.csv('Data.csv')
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = PE ~ .,
data = training_set)
summary(regressor)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = PE ~ AT + V + RH,
data = training_set)
summary(regressor)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = PE ~ .,
data = training_set)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
preds <- y_pred
actual <- y_test
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
actual <- test_set[:-1]
actual <- test_set[-1]
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
preds <- y_pred
actual <- test_set[5]
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
tss <- sum((actual - mean(actual[1])) ^ 2)  ## total sum of squares
tss <- sum((actual - mean(actual[1])) ^ 2)  ## total sum of squares
View(actual)
tss <- sum((actual - mean(actual['PE'])) ^ 2)  ## total sum of squares
actual <- test_set[5].values
actual <- c(test_set[5])
View(actual)
actual <- as.vector(test_set[5])
View(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual['PE'])) ^ 2)  ## total sum of squares
actual <- array(test_set[5])
mean(actual)
actual <- array(test_set$PE)
mean(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual['PE'])) ^ 2)  ## total sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
adrsq = 1-(1-rsq)(1914-1/(1914-5))
adrsq = 1-(1-rsq)*(1914-1/(1914-5))
adrsq = 1-(1-rsq)*(1913/1909)
# Importing the dataset
dataset = read.csv('Data.csv')
View(dataset)
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(dataset)
View(training_set)
training_set$AT2 = dataset$AT^2
training_set$AT3 = dataset$AT^3
training_set$AT4 = dataset$AT^4
training_set$V2 = dataset$V^2
training_set$V3 = dataset$V^3
training_set$V4 = dataset$V^4
training_set$AP2 = dataset$AP^2
training_set$AP3 = dataset$AP^3
training_set$AP4 = dataset$AP^4
training_set$RH2 = dataset$RH^2
training_set$RH3 = dataset$RH^3
training_set$RH4 = dataset$RH^4
poly_reg = lm(formula = PE ~ .,
data = training_set)
training_set$AT2 = training_set$AT^2
training_set$AT3 = training_set$AT^3
training_set$AT4 = training_set$AT^4
training_set$V2 = training_set$V^2
training_set$V3 = training_set$V^3
training_set$V4 = training_set$V^4
training_set$AP2 = training_set$AP^2
training_set$AP3 = training_set$AP^3
training_set$AP4 = training_set$AP^4
training_set$RH2 = training_set$RH^2
training_set$RH3 = training_set$RH^3
training_set$RH4 = training_set$RH^4
poly_reg = lm(formula = PE ~ .,
data = training_set)
est_set$AT2 = test_set$AT^2
test_set$AT3 = test_set$AT^3
test_set$AT4 = test_set$AT^4
test_set$V2 = test_set$V^2
test_set$V3 = test_set$V^3
test_set$V4 = test_set$V^4
test_set$AP2 = test_set$AP^2
test_set$AP3 = test_set$AP^3
test_set$AP4 = test_set$AP^4
test_set$RH2 = test_set$RH^2
test_set$RH3 = test_set$RH^3
test_set$RH4 = test_set$RH^4
y_pred = predict(poly_reg, test_set)
test_set$AT2 = test_set$AT^2
test_set$AT3 = test_set$AT^3
test_set$AT4 = test_set$AT^4
test_set$V2 = test_set$V^2
test_set$V3 = test_set$V^3
test_set$V4 = test_set$V^4
test_set$AP2 = test_set$AP^2
test_set$AP3 = test_set$AP^3
test_set$AP4 = test_set$AP^4
test_set$RH2 = test_set$RH^2
test_set$RH3 = test_set$RH^3
test_set$RH4 = test_set$RH^4
y_pred = predict(poly_reg, test_set)
y_pred
preds <- y_pred
actual <- array(test_set$PE)
mean(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
adrsq = 1-(1-rsq)*(1913/1909)
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 0.8)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting SVR to the dataset
# install.packages('e1071')
library(e1071)
regressor = svm(formula = PE ~ .,
data = dataset,
type = 'eps-regression',
kernel = 'radial')
# Predicting a new result
y_pred = predict(regressor, test_set)
preds <- y_pred
actual <- array(test_set$PE)
mean(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
adrsq = 1-(1-rsq)*(1913/1909)
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# SVR
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting SVR to the dataset
# install.packages('e1071')
library(e1071)
regressor = svm(formula = PE ~ .,
data = training_set,
type = 'eps-regression',
kernel = 'radial')
# Predicting a new result
y_pred = predict(regressor, test_set)
preds <- y_pred
actual <- array(test_set$PE)
mean(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
adrsq = 1-(1-rsq)*(1913/1909)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = PE ~ .,
data = training_set,
control = rpart.control(minsplit = 3))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, test_set)
preds <- y_pred
actual <- array(test_set$PE)
mean(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
adrsq = 1-(1-rsq)*(1913/1909)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = PE ~ .,
data = training_set,
control = rpart.control(minsplit = 1))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, test_set)
preds <- y_pred
actual <- array(test_set$PE)
mean(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
adrsq = 1-(1-rsq)*(1913/1909)
# Random Forest Regression
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Random Forest Regression to the dataset
# install.packages('randomForest')
library(randomForest)
set.seed(1234)
regressor = randomForest(x = training_set[1:4],
y = training_set$PE,
ntree = 500)
# Predicting a new result with Random Forest Regression
y_pred = predict(regressor, test_set)
preds <- y_pred
actual <- array(test_set$PE)
mean(actual)
rss <- sum((preds - actual) ^ 2)  ## residual sum of squares
tss <- sum((actual - mean(actual)) ^ 2)  ## total sum of squares
rsq <- 1 - rss/tss
adrsq = 1-(1-rsq)*(1913/1909)
